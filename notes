---- heroku deployment checklist ----
1. dynamic port binding -- PORT
2. specify node environment -- engines
3. specify start script -- scripts: start
4. create .gitignore file

---- MongoDB Atlas (Cloud DB) ----
Don't forget to whitelist IP address

---- Passport serialize/deserialize ----

(https://stackoverflow.com/questions/27637609/understanding-passport-serialize-deserialize?answertab=votes#tab-top)

1. Where does user.id go after passport.serializeUser has been called?
The user id (you provide as the second argument of the done function) is saved in the session and is later used to retrieve the whole object via the deserializeUser function.

serializeUser determines which data of the user object should be stored in the session. The result of the serializeUser method is attached to the session as req.session.passport.user = {}. Here for instance, it would be (as we provide the user id as the key) req.session.passport.user = {id: 'xyz'}

2. We are calling passport.deserializeUser right after it where does it fit in the workflow?
The first argument of deserializeUser corresponds to the key of the user object that was given to the done function (see 1.). So your whole object is retrieved with help of that key. That key here is the user id (key can be any key of the user object i.e. name,email etc). In  deserializeUser that key is matched with the in memory array / database or any data resource.

The fetched object is attached to the request object as req.user

3. FLOW

passport.serializeUser(function(user, done) {
    done(null, user.id);
});              │
                 │ 
                 │
                 └─────────────────┬──→ saved to session
                                   │    req.session.passport.user = {id: '..'}
                                   │
                                   ↓           
passport.deserializeUser(function(id, done) {
                   ┌───────────────┘
                   │
                   ↓ 
    User.findById(id, function(err, user) {
        done(err, user);
    });            └──────────────→ user object attaches to the request as req.user   
});

---- KEYS ----

1. Don't forget to change the require target for keys.
2. process.env -- config

---- CAPS ----

if a given file exporting a class or comp or a func comp we would be label it with CAPS but if the file return just a func we would label it with a lower case
eg.: src/components/App.js || src/index.js

---- Redux ----

The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function. Since any React component in a React Redux app can be connected, most applications will render a <Provider> at the top level, with the entire app's component tree inside of it. -- Google

Reducers specify how the application's state changes in response to actions sent to the store. Remember that actions only describe what happened, but don't describe how the application's state changes. -- Google

export default function(previousState, action) {
  switch (action.type) {
    default:
      return state;
  }
}